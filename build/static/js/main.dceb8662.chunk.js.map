{"version":3,"sources":["utils/pinata.js","utils/interact.js","utils/network.js","nftDataStore.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","axios","pinJSONToIPFS","JSONBody","a","post","headers","pinata_api_key","process","pinata_secret_api_key","then","response","success","pinataUrl","data","IpfsHash","catch","error","console","log","message","web3","createAlchemyWeb3","safeMint","sendTo","abi","contract","chain","name","imageURI","walletAddress","description","trim","status","metadata","Object","image","pinataResponse","tokenURI","eth","Contract","window","transactionParameters","to","from","methods","encodeABI","ethereum","request","method","params","txHash","connectWallet","addressArray","obj","address","target","href","getCurrentWalletConnected","length","chainMap","collection","contracts","list","ipfs","imagePath","Minter","useState","setWallet","setStatus","nftCollection","setNFTCollection","setChain","sentToAddress","setSendToAddress","useEffect","res","addWalletListener","nftDataStore","setTimeout","chainId","connectWalletPressed","walletResponse","onMintPressed","event","collectionItem","on","accounts","className","onClick","parentElement","style","display","id","String","substring","onChange","value","map","o","i","placeholder","type","src","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ooQAAAA,EAAQ,KAAUC,SAClB,IAGMC,EAAQF,EAAQ,KAETG,EAAa,uCAAG,WAAMC,GAAN,SAAAC,EAAA,+HAGlBH,EACFI,KAJoB,iDAIVF,EAAU,CACjBG,QAAS,CACLC,eAXJC,uBAYIC,sBAXDD,sEAcNE,MAAK,SAAUC,GACb,MAAO,CACHC,SAAS,EACTC,UAAW,qCAAuCF,EAASG,KAAKC,aAGtEC,OAAM,SAAUC,GAEb,OADAC,QAAQC,IAAIF,GACL,CACHL,SAAS,EACTQ,QAASH,EAAMG,aApBF,2CAAH,sD,gBCDpBC,GAAOC,EADiBvB,EAAQ,KAA9BuB,mBADWd,yEAINe,EAAQ,uCAAG,qDAAAnB,EAAA,yDACtBoB,EADsB,EACtBA,OACAC,EAFsB,EAEtBA,IACAC,EAHsB,EAGtBA,SACAC,EAJsB,EAItBA,MACAC,EALsB,EAKtBA,KACAC,EANsB,EAMtBA,SACAC,EAPsB,EAOtBA,cACAC,EARsB,EAQtBA,YAGwB,KAApBF,EAASG,QAAkC,KAAhBJ,EAAKI,OAXd,yCAYb,CACLpB,SAAS,EACTqB,OAAQ,oEAdU,cAkBhBC,EAAW,IAAIC,QACZP,KAAOA,EAChBM,EAASE,MAAQP,EACjBK,EAASH,YAAcA,EArBD,SAuBO7B,EAAcgC,GAvBrB,WAuBhBG,EAvBgB,QAyBFzB,QAzBE,0CA0Bb,CACLA,SAAS,EACTqB,OAAQ,qEA5BU,eAgChBK,EAAWD,EAAexB,UAhCV,UAkCE,IAAIQ,EAAKkB,IAAIC,SAASf,EAAKC,GAlC7B,eAkCtBe,OAAOf,SAlCe,OAoChBgB,EAAwB,CAC5BC,GAAIjB,EACJkB,KAAMd,EACN,KAAQW,OAAOf,SAASmB,QAAQtB,SAASC,EAAQc,GAAUQ,aAvCvC,oBA4CCL,OAAOM,SACzBC,QAAQ,CACPC,OAAQ,sBACRC,OAAQ,CAACR,KA/CO,eA4CdS,EA5Cc,yBAiDb,CACLvC,SAAS,EACTqB,OAAQ,sCAAmCN,EAAQ,IAAMwB,IAnDvC,4DAsDb,CACLvC,SAAS,EACTqB,OAAQ,sCAA8B,KAAMb,UAxD1B,2DAAH,sDA6DRgC,EAAa,uCAAG,8BAAAhD,EAAA,0DACvBqC,OAAOM,SADgB,0CAGIN,OAAOM,SAASC,QAAQ,CACjDC,OAAQ,wBAJa,cAGjBI,EAHiB,OAMjBC,EAAM,CACVrB,OAAQ,6DACRsB,QAASF,EAAa,IARD,kBAUhBC,GAVgB,yDAYhB,CACLC,QAAS,GACTtB,OAAQ,gBAAQ,KAAIb,UAdC,yDAkBlB,CACLmC,QAAS,GACTtB,OACE,+BACE,8BACG,IADH,eAEK,IACH,mBAAGuB,OAAO,SAASC,KAAI,oCAAvB,2FAzBiB,yDAAH,qDAoCbC,EAAyB,uCAAG,4BAAAtD,EAAA,0DACnCqC,OAAOM,SAD4B,0CAGRN,OAAOM,SAASC,QAAQ,CACjDC,OAAQ,iBAJyB,aAG7BI,EAH6B,QAMlBM,OAAS,GANS,yCAO1B,CACLJ,QAASF,EAAa,GACtBpB,OAAQ,+DATuB,gCAY1B,CACLsB,QAAS,GACTtB,OAAQ,iEAduB,mFAkB5B,CACLsB,QAAS,GACTtB,OAAQ,gBAAQ,KAAIb,UApBa,yDAwB9B,CACLmC,QAAS,GACTtB,OACE,+BACE,8BACG,IADH,eAEK,IACH,mBAAGuB,OAAO,SAASC,KAAI,oCAAvB,2FA/B6B,0DAAH,qDCxGzBG,EAAW,CACpB,MAAO,UACP,UAAW,SACX,MAAO,WACP,MAAO,UACP,MAAO,SACP,OAAQ,QACR,QAAS,WCPE,GACb,CACEC,WAAY,OACZC,UAAW,CACT,QAAY,CACVpC,SAAU,6CACVD,IAAK1B,EAAQ,KAEf,OAAW,CACT2B,SAAU,6CACVD,IAAK1B,EAAQ,MAGjBgE,KAAM,CACJ,CACEC,KAAM,mFACNC,UAAW,sBACXrC,KAAM,MACNG,YAAa,gBAEf,CACEiC,KAAM,mFACNC,UAAW,sBACXrC,KAAM,MACNG,YAAa,kBAInB,CACE8B,WAAY,MACZC,UAAW,CACT,QAAY,CACVpC,SAAU,6CACVD,IAAK1B,EAAQ,KAEf,OAAU,CACR2B,SAAU,6CACVD,IAAK1B,EAAQ,MAGjBgE,KAAM,CACJ,CACEC,KAAM,mFACNC,UAAW,wBACXrC,KAAM,cACNG,YAAa,kBAInB,CACE8B,WAAY,kBACZC,UAAW,CACT,QAAY,CACVpC,SAAU,6CACVD,IAAK1B,EAAQ,KAEf,OAAW,CACT2B,SAAU,6CACVD,IAAK1B,EAAQ,MAGjBgE,KAAM,CACJ,CACEC,KAAM,mFACNC,UAAW,kCACXrC,KAAM,QACNG,YAAa,kBAInB,CACE8B,WAAY,cACZC,UAAW,CACT,QAAY,CACVpC,SAAU,6CACVD,IAAK1B,EAAQ,KAEf,OAAU,CACR2B,SAAU,6CACVD,IAAK1B,EAAQ,MAGjBgE,KAAM,CACJ,CACEC,KAAM,mFACNC,UAAW,8BACXrC,KAAM,OACNG,YAAa,gBAEf,CACEiC,KAAM,mFACNC,UAAW,8BACXrC,KAAM,OACNG,YAAa,kBAInB,CACE8B,WAAY,cACZC,UAAW,CACT,QAAY,CACVpC,SAAU,6CACVD,IAAK1B,EAAQ,KAEf,OAAU,CACR2B,SAAU,6CACVD,IAAK1B,EAAQ,MAGjBgE,KAAM,CACJ,CACEC,KAAM,mFACNC,UAAW,oBACXrC,KAAM,SACNG,YAAa,gBAEf,CACEiC,KAAM,mFACNC,UAAW,uBACXrC,KAAM,aACNG,YAAa,mBC0CNmC,EA7JA,WAAO,IAAD,EAEgBC,mBAAS,IAFzB,mBAEZrC,EAFY,KAEGsC,EAFH,OAGSD,mBAAS,IAHlB,mBAGZlC,EAHY,KAGJoC,EAHI,OAIuBF,mBAAS,IAJhC,mBAIZG,EAJY,KAIGC,EAJH,OAKOJ,mBAAS,IALhB,mBAKZxC,EALY,KAKL6C,EALK,OAMuBL,qBANvB,mBAMZM,EANY,KAMGC,EANH,KAQnBC,oBAAS,sBAAC,sBAAAvE,EAAA,sDACRsD,IAA4BhD,MAAK,SAACkE,GAAS,IAClCrB,EAAmBqB,EAAnBrB,QAAStB,EAAU2C,EAAV3C,OAChBmC,EAAUb,GACVc,EAAUpC,GACV4C,IACAN,EAAiBO,EAAa,IAC9BC,YAAW,WACNtC,OAAOM,UAAYN,OAAOM,SAASiC,SACpCR,EAASZ,EAASnB,OAAOM,SAASiC,SAAWpB,EAASnB,OAAOM,SAASiC,SAAW,sBAAwBvC,OAAOM,SAASiC,WAE1H,QAXG,2CAaP,IAEH,IAAMC,EAAoB,uCAAG,4BAAA7E,EAAA,sEACEgD,IADF,OACrB8B,EADqB,OAE3Bb,EAAUa,EAAejD,QACzBmC,EAAUc,EAAe3B,SAHE,2CAAH,qDAMpB4B,EAAa,uCAAG,WAAOC,EAAOC,GAAd,iBAAAjF,EAAA,yDAEhBkE,EAAcR,UAAUnC,GAFR,sDAQOJ,EAAS,CAChCO,cAAeA,EACfN,OAAQiD,GAAgC3C,EACxCL,IAAK6C,EAAcR,UAAUnC,GAAOF,IACpCC,SAAU4C,EAAcR,UAAUnC,GAAOD,SACzCC,MAAOA,EACPC,KAAMyD,EAAezD,KACrBC,SAAUwD,EAAerB,KACzBjC,YAAasD,EAAetD,cAhBZ,gBAQVE,EARU,EAQVA,OAWRoC,EAAUpC,GAnBQ,2CAAH,wDAyBnB,SAAS4C,IACHpC,OAAOM,UACTN,OAAOM,SAASuC,GAAG,gBAAgB,SAACN,GAClCR,EAASZ,EAASoB,GAAWpB,EAASoB,GAAW,sBAAwBA,MAE3EvC,OAAOM,SAASuC,GAAG,mBAAmB,SAACC,GACjCA,EAAS5B,OAAS,GACpBS,EAAUmB,EAAS,IACnBlB,EAAU,gEAEVD,EAAU,IACVC,EAAU,qEAIdA,EACE,8BACG,IADH,eAEK,IACH,mBAAGb,OAAO,SAASC,KAAI,oCAAvB,wFAqBR,OACE,sBAAK+B,UAAU,SAAf,UAGI7D,KAAqB,YAAVA,GAAiC,WAAVA,IAAuB,sBAAK6D,UAAU,QAAf,UACvD,sBAAMA,UAAU,WAAWC,QATd,SAACL,GACpBA,EAAM5B,OAAOkC,cAAcC,MAAMC,QAAQ,QAQnC,kBACE,4CAFqD,wDAMxD9D,GACH,wBAAQ+D,GAAG,eAAeJ,QAASR,EAAnC,SACI,oDAIFnD,GACF,sBAAK0D,UAAU,cAAf,gCACuBM,OAAOhE,GAAeiE,UAAU,EAAG,GAAK,MAAQD,OAAOhE,GAAeiE,UAAU,IACnGpE,GAAS,uCAAUA,EAAV,UAIb,uBACA,oBAAIkE,GAAG,QAAP,kCACA,oBAAIL,UAAU,cAAd,qCAEA,sBAAKA,UAAU,kBAAf,UAEE,qBAAKA,UAAU,mBAAf,SAEE,wBAAQQ,SA3CY,SAACZ,GAC3Bb,EAAiBO,EAAaM,EAAM5B,OAAOyC,SA0CrC,SAEInB,EAAaoB,KAAI,SAACC,EAAGC,GACnB,OAAO,wBAAQH,MAAOG,EAAf,SAA2BD,EAAEtC,YAANuC,UAOxC,uBAAOZ,UAAU,gBAAgBQ,SAjDV,SAACZ,GAC1BV,EAAiBU,EAAM5B,OAAOyC,QAgDmCI,YAAY,2BAA2BzE,KAAK,UAAU0E,KAAK,YAI1H,qBAAKd,UAAU,uBAAf,SAEIlB,EAAcP,MAAQO,EAAcP,KAAKmC,KAAI,SAACb,EAAgBe,GAC5D,OAAO,sBAAaZ,UAAU,gBAAvB,UAAuC,qBAAKe,IAAKlB,EAAepB,YAAiB,wBAAQwB,QAAS,SAAAL,GAAK,OAAID,EAAcC,EAAOC,IAA/C,oBAAvEe,QAKvB,mBAAGZ,UAAU,SAAb,SAAuBvD,IAEvB,sBAAKuD,UAAU,aAAf,sFAC2E,0DChJlEgB,MATf,WAEE,OACE,qBAAKhB,UAAU,MAAf,SACE,cAAC,EAAD,OCMSiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBjG,MAAK,YAAkD,IAA/CkG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.dceb8662.chunk.js","sourcesContent":["require('dotenv').config();\nconst key = process.env.REACT_APP_PINATA_KEY;\nconst secret = process.env.REACT_APP_PINATA_SECRET;\n\nconst axios = require('axios');\n\nexport const pinJSONToIPFS = async(JSONBody) => {\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n    //making axios POST request to Pinata ⬇️\n    return axios \n        .post(url, JSONBody, {\n            headers: {\n                pinata_api_key: key,\n                pinata_secret_api_key: secret,\n            }\n        })\n        .then(function (response) {\n           return {\n               success: true,\n               pinataUrl: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n           };\n        })\n        .catch(function (error) {\n            console.log(error)\n            return {\n                success: false,\n                message: error.message,\n            }\n\n    });\n};","import { pinJSONToIPFS } from './pinata.js'\nimport 'dotenv/config';\n\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nexport const safeMint = async ({\n  sendTo,\n  abi,\n  contract,\n  chain,\n  name,\n  imageURI,\n  walletAddress,\n  description\n}) => {\n  \n  if (imageURI.trim() === \"\" || (name.trim() === \"\")) {\n    return {\n      success: false,\n      status: \"❗Please make sure all fields are completed before minting.\",\n    }\n  }\n\n  const metadata = new Object();\n  metadata.name = name;\n  metadata.image = imageURI;\n  metadata.description = description;\n\n  const pinataResponse = await pinJSONToIPFS(metadata);\n\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: \"😢 Something went wrong while uploading your tokenURI.\",\n    }\n  }\n\n  const tokenURI = pinataResponse.pinataUrl;\n\n  window.contract = await new web3.eth.Contract(abi, contract);\n\n  const transactionParameters = {\n    to: contract,\n    from: walletAddress,\n    'data': window.contract.methods.safeMint(sendTo, tokenURI).encodeABI()\n  };\n\n  //sign the transaction via Metamask\n  try {\n    const txHash = await window.ethereum\n      .request({\n        method: 'eth_sendTransaction',\n        params: [transactionParameters],\n      });\n    return {\n      success: true,\n      status: \"✅ Check out your transaction: \" + chain + \" \" + txHash\n    }\n  } catch (error) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + error.message\n    }\n  }\n}\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"Select an NFT to mint from a collection from the dropdown.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"Select an NFT to mint from a collection from the dropdown.\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n","export const chainMap = {\n    \"0x4\": \"Rinkeby\",\n    '0x13881': \"Mumbai\",\n    \"0x1\": \"Ethereum\",\n    \"0x3\": \"Ropsten\",\n    \"0x5\": \"Goerli\",\n    '0x2a': \"Kovan\",\n    '0x137': \"Polygon\"\n}\n\nexport const supportedChains = [\n    \"Rinkeby\",\n    \"Mumbai\"\n]","export default [\n  {\n    collection: \"BAYC\",\n    contracts: {\n      \"Rinkeby\" : {\n        contract: \"0x26472AA24D795AbcB687bddb44d733ef55Ebdf09\",\n        abi: require('./abis/erc721-abi.json')\n      },\n      \"Mumbai\" : {\n        contract: \"0x10125177d4b7063260B4B7200b0FD1dC6d8EdDfd\",\n        abi: require('./abis/erc721-abi.json')\n      }\n    },\n    list: [\n      {\n        ipfs: \"https://gateway.pinata.cloud/ipfs/QmRAF2zPcy6jJfi3w5JicTs1sdLaqywutyiYkspdeFeNNy\",\n        imagePath: \"./nfts/BAYC_4-1.png\",\n        name: \"4-1\",\n        description: \"stl demo nft\"\n      },\n      {\n        ipfs: \"https://gateway.pinata.cloud/ipfs/QmSZqeAU5w1ynjgEisy765L84vBTH4QJJLJUXKb9S5NarY\",\n        imagePath: \"./nfts/BAYC_4-2.png\",\n        name: \"4-2\",\n        description: \"stl demo nft\"\n      }\n    ]\n  },\n  {\n    collection: \"ZED\",\n    contracts: {\n      \"Rinkeby\" : {\n        contract: \"0x7978088051DD32Ff6778c2c2C82893Eb983f7508\",\n        abi: require('./abis/erc721-abi.json')\n      },\n      \"Mumbai\": {\n        contract: \"0xF2823589834Ad0f66863E5db9a58B4134CEe9d80\",\n        abi: require('./abis/erc721-abi.json')\n      }\n    },\n    list: [\n      {\n        ipfs: \"https://gateway.pinata.cloud/ipfs/QmfHSGwXhFsBjxTYDRo5aJNvmmAgjAYmihdNXsF7Zfc2jm\",\n        imagePath: \"./nfts/DriversRun.png\",\n        name: \"Drivers Run\",\n        description: \"stl demo nft\"\n      }\n    ]\n  },\n  {\n    collection: \"EXPANSION_PUNKS\",\n    contracts: {\n      \"Rinkeby\" : {\n        contract: \"0x77187E35640a67f37814706F32425687Ff527544\",\n        abi: require('./abis/erc721-abi.json')\n      },\n      \"Mumbai\" : {\n        contract: \"0x3C35DE2A81B694507323791594AB09FfF7FD263B\",\n        abi: require('./abis/erc721-abi.json')\n      }\n    },\n    list: [\n      {\n        ipfs: \"https://gateway.pinata.cloud/ipfs/QmP9pamMk45LxPy6ziCxCYjq435JdyRmCE28Z9QtPAuCHz\",\n        imagePath: \"./nfts/Expansion_Punk_16461.png\",\n        name: \"16461\",\n        description: \"stl demo nft\"\n      }\n    ]\n  },\n  {\n    collection: \"WOMEN_TRIBE\",\n    contracts: {\n      \"Rinkeby\" : {\n        contract: \"0x24f7753BAc090eA749d1f114D8A78129a39B0D0a\",\n        abi: require('./abis/erc721-abi.json')\n      },\n      \"Mumbai\": {\n        contract: \"0xeA33E3A170070Da257943dbA6a6361aF4fA7a687\",\n        abi: require('./abis/erc721-abi.json')\n      }\n    },\n    list: [\n      {\n        ipfs: \"https://gateway.pinata.cloud/ipfs/QmUKcBhBWGDDTwfLKWGJyJ66XNKrTGNCitVAKK4aLcxiKK\",\n        imagePath: \"./nfts/Women_Tribe_1370.png\",\n        name: \"1370\",\n        description: \"stl demo nft\"\n      },\n      {\n        ipfs: \"https://gateway.pinata.cloud/ipfs/QmUEPVYoB15D2MR1oi2gpHTce4v9FQ3jDMEBAFAKPsaq8V\",\n        imagePath: \"./nfts/Women_Tribe_5274.png\",\n        name: \"5274\",\n        description: \"stl demo nft\"\n      }\n    ]\n  },\n  {\n    collection: \"RIOT_RACERS\",\n    contracts: {\n      \"Rinkeby\" : {\n        contract: \"0x586707c50670C322697E00275e3Dc72543d1018F\",\n        abi: require('./abis/erc721-abi.json')\n      },\n      \"Mumbai\": {\n        contract: \"0xae96095fF42B0Cae2DaD3d49E5EE11663280d819\",\n        abi: require('./abis/erc721-abi.json')\n      }\n    },\n    list: [\n      {\n        ipfs: \"https://gateway.pinata.cloud/ipfs/Qmb5Q4QQSpPYkf6ta355ve3SYXZfbFMp2PiWPKGHiaUFhr\",\n        imagePath: \"./nfts/Octane.png\",\n        name: \"Octane\",\n        description: \"stl demo nft\"\n      },\n      {\n        ipfs: \"https://gateway.pinata.cloud/ipfs/QmdFox1wfNvLSZAodKn1YKhRn3DzYjWpCKq2UncpV1fTSJ\",\n        imagePath: \"./nfts/AirBender.png\",\n        name: \"Air Bender\",\n        description: \"stl demo nft\"\n      },\n    ]\n  }\n]","import { useEffect, useState } from \"react\";\nimport { connectWallet, getCurrentWalletConnected, safeMint } from \"./utils/interact.js\";\nimport { chainMap, supportedChains } from './utils/network';\nimport nftDataStore from './nftDataStore';\n\nconst Minter = () => {\n\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [nftCollection, setNFTCollection] = useState([]);\n  const [chain, setChain] = useState(\"\");\n  const [sentToAddress, setSendToAddress] = useState();\n \n  useEffect(async () => {\n    getCurrentWalletConnected().then((res) => {\n      const {address, status} = res;\n      setWallet(address)\n      setStatus(status); \n      addWalletListener();\n      setNFTCollection(nftDataStore[0]);\n      setTimeout(() => {\n        if(window.ethereum && window.ethereum.chainId){\n          setChain(chainMap[window.ethereum.chainId] ? chainMap[window.ethereum.chainId] : 'unsupported chain: ' + window.ethereum.chainId);\n        }\n      }, 2000);\n    });\n  }, []);\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async (event, collectionItem) => {\n\n    if(!nftCollection.contracts[chain]) {\n      \n      // \n\n    } else {\n\n      const { status } = await safeMint({\n        walletAddress: walletAddress,\n        sendTo: sentToAddress ? sentToAddress : walletAddress,\n        abi: nftCollection.contracts[chain].abi,\n        contract: nftCollection.contracts[chain].contract,\n        chain: chain,\n        name: collectionItem.name,\n        imageURI: collectionItem.ipfs,\n        description: collectionItem.description\n      });\n\n      setStatus(status);\n\n    }\n\n  };\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on('chainChanged', (chainId) => {\n        setChain(chainMap[chainId] ? chainMap[chainId] : 'unsupported chain: ' + chainId );\n      });\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"Select an NFT to mint from a collection from the dropdown.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  const updateNFTCollection = (event) => {\n    setNFTCollection(nftDataStore[event.target.value]);\n  }\n\n  const applySentToAddress = (event) => {\n    setSendToAddress(event.target.value)\n  }\n\n  const closeWarning = (event) => {\n    event.target.parentElement.style.display='none';\n  }\n  \n  return (\n    <div className=\"Minter\">\n\n      { \n        chain && !(chain === 'Rinkeby' || chain === 'Mumbai') && <div className=\"alert\">\n          <span className=\"closebtn\" onClick={closeWarning}>&times;</span> \n            <strong>Alert!</strong> Network is not supported, use Rinkeby or Mumbai.\n          </div>\n      }\n\n      { !walletAddress &&\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n          <span>Connect Wallet</span>\n      </button>\n      }\n\n      { walletAddress &&\n      <div className=\"text-center\">\n        Wallect Connected: { String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) }\n        { chain && <span> | {chain} </span> }\n      </div>\n      }\n\n      <br></br>\n      <h1 id=\"title\">STL: Demo NFT Minter</h1>\n      <h3 className=\"text-center\">[for Rinkeby or Mumbai]</h3>\n\n      <div className=\"input-container\">\n\n        <div className=\"select-container\">\n        \n          <select onChange={updateNFTCollection}>\n            {\n              nftDataStore.map((o, i) => {\n                return <option value={i} key={i}>{o.collection}</option>;\n              })\n            }\n          </select>\n        \n      </div>\n      \n      <input className=\"address-input\" onChange={applySentToAddress} placeholder=\"send to 0x... (optional)\" name=\"address\" type=\"text\" />\n\n    </div>\n\n      <div className=\"collection-container\">\n        {\n          nftCollection.list && nftCollection.list.map((collectionItem, i) => {\n            return <div key={i} className=\"nft-container\"><img src={collectionItem.imagePath}></img><button onClick={event => onMintPressed(event, collectionItem)}>Mint</button></div>;\n          })\n        }\n      </div>\n      \n      <p className=\"status\">{status}</p>\n\n      <div className=\"disclaimer\">\n        Disclaimer: These NFTs are for Demo purposes only on supported networks: <b>Rinkeby or Mumbai.</b>\n      </div>\n      \n    </div>\n  );\n};\n\nexport default Minter;\n","import Minter from './Minter'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Minter></Minter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}